% SLIDES - brug denne linie
\documentclass[mathserif]{beamer} % options: gray

% HANDOUTS - brug denne linie
%\documentclass[handout,mathserif]{beamer} % options: gray

\usetheme{CambridgeUS} %sidebar
\usecolortheme{dolphin}

\usepackage{graphicx}
\usepackage{amssymb,amsmath}
\usepackage[T1]{fontenc}
%\usepackage[icelandic]{babel}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{bm}
\usepackage{tipx}
\usepackage{marvosym}
%\usepackage{subfigure}
\usepackage{pgfpages}
\usepackage{multirow}

\usepackage{tikz,makecell}
\usetikzlibrary{arrows,decorations.pathmorphing,decorations.footprints,
fadings,calc,trees,mindmap,shadows,decorations.text,patterns,positioning,shapes,matrix,fit}
\input{graphical_settings}
\tikzset{
  invisible/.style={opacity=0},
  visible on/.style={alt={#1{}{invisible}}},
  alt/.code args={<#1>#2#3}{%
    \alt<#1>{\pgfkeysalso{#2}}{\pgfkeysalso{#3}} % \pgfkeysalso doesn't change the path
  },
}
% hvis man vil har eg. 4 slides på en side
% \pgfpagesuselayout{4 on 1}[a4paper,border shrink = 5mm, landscape]

\definecolor{lgrey}{RGB}{245,245,245}
\setbeamercolor{block body}{fg=black,bg=lgrey}
\DeclareMathOperator{\var}{Var}
\DeclareMathOperator{\cov}{Cov}      % Covariance
\DeclareMathOperator{\bcov}{\cov}    % Covariance (as used in the GLM book)
\DeclareMathOperator{\mcov}{C}       % multi dimensional covariance
\DeclareMathOperator{\dis}{D}        % dispersion matrix
\DeclareMathOperator{\acfest}{C}     % estimate of the autocovariance function
\DeclareMathOperator{\e}{E}          % mean
\DeclareMathOperator{\mean}{\e}      % mean (as used in the GLM book)
\DeclareMathOperator{\cor}{Cor}      % correlation
\DeclareMathOperator{\diag}{diag}    % diagonal-matrix
\DeclareMathOperator{\rang}{rank}    % matrix-rank
\DeclareMathOperator{\for}{for}    % for
\DeclareMathOperator{\FOp}{F}        % forward shift operator
\DeclareMathOperator{\SOp}{S}        % sum operator
\DeclareMathOperator{\HOp}{H}        % arbitrary operator
\DeclareMathOperator{\Real}{Re}      % real-part
\DeclareMathOperator{\Imag}{Im}      % imaginary-part
\DeclareMathOperator*{\member}{\in}  % belongs to or is an element in
\DeclareMathOperator{\msea}{MSE1}    % Mean Square Error 1
\DeclareMathOperator{\mseb}{MSE2}    % Mean Square Error 2
\DeclareMathOperator{\sse}{SSE}      % Sum of Squared Errors
\DeclareMathOperator{\ssb}{SSB}      % Sum of Squared Blocks
\DeclareMathOperator{\sst}{SST}      % Sum of Squared Treatments
\DeclareMathOperator{\adj}{adj}      % Just guessing...

\newcommand{\bs}{\boldsymbol}
\newcommand{\bi}{\begin{itemize}\item}
\newcommand{\ei}{\end{itemize}}
\newcommand{\eq}[1]{\begin{equation} #1 \end{equation}}
\newcommand{\ea}[1]{\begin{eqnarray} #1 \end{eqnarray}}
\newcommand{\vs}{\vspace{2mm}}

\definecolor{Red}{rgb}{0.9,0,0.1}

\title[Data mining]{Data mining}
\subtitle{Course on data wrangling using R at the UNU}
\author[Bjarki\&Einar]{Bjarki Þór Elvarsson and Einar Hjörleifsson}
\date{} % beskidt .. men det virker
\institute[MRI]{Marine Research Institute}
\beamertemplatenavigationsymbolsempty % fjerner pdf-indhold, til hvis der bare skal printes slides ud
\AtBeginSection[]{
\begin{frame}<beamer>
   \frametitle{Overview}
   \tableofcontents[currentsection]
 \end{frame}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<echo=FALSE, warning=FALSE, message=FALSE>>=
library(ggplot2)
library(plyr)
library(dplyr)
@
\frame{
\titlepage
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frame{
\frametitle{Overview}
\tableofcontents
}

\section{Introduction}
\frame{
  \frametitle{Organization}
  This course is thought of as a support class for other classes in the stock assessment line. During the course the students will learn how to: 
  \bi Import data from various sources and fix common data issues
%  \vs
  \item Produce summary statistics from the data
%  \vs
  \item Illustrate graphically various aspects of the data
%  \vs
  \item Simple least squares fitting
  \ei 
\vs
The course is organized as follows:
  \bi Focus is on in-class assignments with bits of lectures in between
  \item Each student will be assigned a species to work with
  \item Each student should hand in a short report of the class assignment
  \ei
}

\frame{
  \frametitle{Why R? (.. or why not Excel)}
  R has become the lingua france of statistical analysis and data wrangling
  \vs
  \bi It’s free! If you are a teacher or a student, the benefits are obvious
  \vs
  \item It runs on a variety of platforms including Windows, Unix and MacOS
  \vs
  \item It provides an unparalleled platform for programming new statistical
methods in an easy and straightforward manner
  \vs 
  \item It offers powerful tools for data exploration and presentation
  \ei

}

\section{RStudio}
\frame{
\frametitle{RStudio}

\bi RStudio allows the user to run R in a more user-friendly environment.  It is open- source (i.e. free) and available at \url{www.rstudio.com}
\vs
\item built to help you write R code, run R code, and analyze data with R
\vs
\item text editor, version control, project handling, markdown support, keyboard shortcuts, debugging tools, and much more
\ei
}

\frame{
\frametitle{Using R-studio}
  
   \begin{tikzpicture}
    \node[anchor=south west,inner sep=0] at (0,0) {\includegraphics[width=0.8\textwidth]{rstudio}};
    \node[red,ultra thick,visible on=<2->] at (2,2) {R - console};
    \node[red,ultra thick,visible on=<3->] at (8,5) {Session info};
    \node[red,ultra thick,visible on=<4->] at (2,5) {Script editor};
    \node[red,ultra thick,visible on=<5->] at (8,2) {Other items};
\end{tikzpicture}

}

\begin{frame}[fragile]
\frametitle{R-console}
One can type commands directly into the console to perform calculations:
<<>>=
1+1 ## this should be 2 
mean(c(1,2,3,4,5)) ## mean of all numbers from 1 to 5
@
and assign the results with the "<-" sign:
<<>>=
x <- 1+1 ## save the result into a variable named x
x        ## print out the value of x to screen 
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Using R as a calculator}
R can be used as calculator:
<<eval=FALSE>>=
1+1       # 1 plus 1 equals 2;)
2*2       # 2 times 2 equals 4
3^2.5     # 3 to the power of 2.5
exp(5)    # e to the power of 5
log(5)    # natural logarithm (ln) of 5
log10(5)  # Base 10 log of 5
1/2       # 1 over 2 equals 0.5
@


\end{frame}


\begin{frame}[fragile]
\frametitle{Few useful commands}
<<eval=FALSE>>=
seq(1,10)        # makes a vactor from 1 to 10  
1:10             # same
rep(2,3)         # makes a vector that contains 2, 3 times
length(y)        # returns the length of a vecor named y
sort(y)          # sorts a vector into ascending or 
                 # descending order
cut(y)           # divides the range of y into intervals and 
                 # makes a factor variable
as.character(y)  # changes y to a character vector
cbind(x1,x2)     # binds vectors by columns
rbind(x1,x2)     # binds vectors by rows

@
\end{frame}

\begin{frame}[fragile]
\frametitle{Few useful commands (II)}
<<eval=FALSE>>=
mean()       # mean
median()     # median
quantile()   # quantiles
summary()    # depends on what we feed it with...
sd()         # standard deviation
var()        # variance
range()      # range
min()        # smallest value
max()        # largest value
@

\end{frame}


\frame{
\frametitle{Session info}
  \begin{columns}
  \begin{column}{0.5\linewidth}
  \bi \textbf{Environment}: Contains a list of all declared variables. If you have a dataset you can double click the variable to view the data
  \vs
  \vs
  \item \textbf{History}: Contains a list of all previous commands entered into the console.
\ei
  \end{column}
  \begin{column}{0.5\linewidth}
  \includegraphics[width=0.9\linewidth]{env.png}\\
  \vs
  \includegraphics[width=0.9\linewidth]{hist.png}
  \end{column}
  \end{columns}
}


\frame{
\frametitle{Script editor}
  \bi Is opened when selecting File->New file->R script from the menu panel
  \vs
  \item A R script is basically a series of R commands that can be run in the console 
  \vs
  \item It is recommended to store all commands that "work" in a script for later reconstruction of a particular analysis
  \vs
  \item It is possible to run a single line in a script by pressing [ctrl]+Enter or the \includegraphics[width=0.1\linewidth]{button.png}  button in the top right corner
  \ei
}

\frame{
\frametitle{Other items}
  \bi \textbf{Files}: Shows files on the computer. The user can change the working directory (where R reads data-files and scripts from) by selecting "more->Set as working directory"
  \vs
  \item \textbf{Plots}: Graphical output from R. The user can export these the figures to file (as jpeg, png or pdf) or to clipboard
  \vs
  \item \textbf{Help}: Gives a browsable interface to R's in-line help pages. The user can search for a topic or a specific function
\ei
}
\frame{
\frametitle{On help}
A help page for a function usually has the following categories:
\bi \textbf{Description}: short description of the function
\item \textbf{Usage}: how the function is used/called from R
\item \textbf{Arguments}: What are the function inputs
\item \textbf{Details}: The nitty gritty on how the function should work
\item \textbf{Examples}: example uses
\item \textbf{See also}: other useful functions that are similar
\ei

}

\begin{frame}[fragile]
\frametitle{Help commands}
One can also get help from the console:
<<eval=FALSE>>=
help.start()         # General help page
help(nameOffuntion)  # Gives the help page needed
?nameOffunction      # shorthand
help.search('topic') # searches for specific topic
@

\end{frame}



\frame{
\frametitle{Projects}
  \bi Rstudio allows us to make things a little bit easier to isolate the task we are working with a any given point by defining specific \textbf{projects}
  \vs
  \item Projects save the state between sessions. This includes:
  \bi Working directories
  \item Open files/scripts
  \item Workspaces
  \item Color scheme
  \ei
  \vs
  \item Projects are created by selecting File->New project
  \ei
}

\frame{
\frametitle{Turning R off}
  When shutting down R and Rstudio it reminds you to save your work: \\ \vs
  \includegraphics[width=0.5\linewidth]{shutdown.png}\\ \vs
  In general you should \textbf{not} save your workspace unless the analysis takes a long time to reproduce. 

}




\frame{
  \frametitle{Excercise 1}
  \bi Create a folder under your Documents folder and name it 'Class excercise' 
  \item Open R-studio and create a new project called "classEx1" and associate it with the newly created directory
  \item Install ggplot2, tidyr, dplyr and gridExtra if you haven't done so already
  \item Create a new script named 'Ex1.R'
  \item Look at the help page for 'sum'
  \item Write a script that calculates the sum of all numbers from 1 to 100
\ei
}



\section{Graphical presentation}
\frame{
  \frametitle{The state of R-graphics}
  \bi Base R is rich with facilities for creating and developing
  interesting graphics. 
  \vs
\item Contains most basic functionality s.a. scatter--plots,
  boxplots etc..
  \vs
\item Various specialized packages have been developed to meet certain
  needs (sp, geo, verification, etc..)
  \vs
\item Images/plots can be exported to various file formats.  
  \ei
}

%\frame{
%  \frametitle{Base R}
%  \bi Graphs are displayed on a static device. 
%  \vs
%\item User draws to the device through plotting commands. 
%\vs 
%\item Objects can not be edited without redrawing the whole plot.
%\vs
%\item One can quickly run into problems with complex layouts
%  s.a. facetting, variable scaling. 
%\vs
%\item  Interactive analysis of data can be cumbersome in all but
%  trivial cases.
%  \ei

%}

%\frame{
%\frametitle{Alternatives}
%\bi To address some of the issues of base R's graphic system \texttt{grid}
%was developed:
%\bi a low--level graphics system.
%\item Allows a great deal of flexibility
%\item No high--level functionality.
%\ei
%\vs
%\item Various packages use \texttt{grid} as a basis for high--level
%  graphics. Notably:
%\bi \texttt{lattice} which is an R implementation of William
%Cleveland's trellis system. 
%\item \texttt{ggplot2} which is an implementation of a layered grammar
%  of graphics by Hadley Wickham (and inspired by Leland Wilkinson). 
%\ei
%\ei
%}

\frame{
\frametitle{Dataset}
We are going to play around a bit with data from the Scientific
whaling operation in Icelandic waters. 
\bi ID: identification
\item age: age of the animal estimated using eye lens deterioration
\item length: length in cm 
\item sex: Male/Female
\item location: latitude and longitude
%\item bormicon.areas: area where samples were taken 
\item NS: the region (North/South) where samples were taken
\item Maturity: detailed maturity of the animal
\item date.caught: date of the sample
%\item year: year of the sample
%\item ...: and other variables not used here
\ei 


}

\begin{frame}[fragile,shrink=0.5]
\frametitle{Read in the data}
<<>>=
## data read in using read.table
minke <- read.csv2('../data/minke.csv')
 
str(minke)

@

\end{frame}

  



\frame{
  \frametitle{ggplot2}
  \bi In this course we will focus on the abilities of the ggplot2 plotting package
  \vs
  \item In ggplot2, plots are built by layering graphical components where the components are summed together to form the plot like layered transparencies on a projector
  \vs
\item A ggplot layer is composed of four parts:
  \bi data and aesthetic mapping
\item Statistical transformations (stat\_*), e.g. identity, mean, sum, etc..
\item Geometric object (geom\_*), e.g x-y scatterplot, barplot, boxplot etc
\item Position adjustment, stack or dodge
  \ei
  \vs
\item Usually some common elements between layers (e.g. same data, different geoms)
  \vs
\item Defaults are used for the layers whenever components are not specified
\ei

}

\begin{frame}[fragile,shrink=0.95]
\frametitle{ggplot -- first principles}
<<warning=FALSE,fig.height=5>>=
## create a empty plot
p <- ggplot()

## add layer to the plot

p + layer(data=minke, mapping=aes(x=age, y=length), 
  geom = 'point', stat='identity', position = 'identity')

@


\end{frame}


%\subsection{Layers}
%\frame{
%\frametitle{Defining Layers}
%\bi 
%\vs 
%\item The benefit of this layering approach is that it allows sane defaults to be used for most components of the layers 
%\vs
%\item Special types of layers s.a. scatterplots are predefined.
%\vs
%\item Layers are added to a graph by '+'
%\ei
%}


\begin{frame}[fragile,shrink=0.95]
\frametitle{ggplot -- defaults}
The full specification of a layer is rather cumbersome to write out as each component of a layer needs to specified.
It is therefor more common to use a shorthand for common types of plots:

<<warning=FALSE,fig.height=5>>=

p + geom_point(aes(age,length), data = minke)

@

\end{frame}



\frame{
\frametitle{What are Aesthetic Mappings (aes)}
Aesthetic mappings define the role of different variables in the
dataset
\bi x and y -- dimensions, size, color, fill, symbols, etc.
\vs
\item Aesthetics can be constants or variable.
\vs 
\item Defined using aes() - command and can be defined globally (within the
  starting ggplot command) or locally within layers.
\ei
}


\begin{frame}[fragile,shrink=0.95]
\frametitle{ggplot -- defaults}

The same plot with global data and aes mapping

<<warning=FALSE,fig.height=5>>=
ggplot(minke,aes(age,length)) + geom_point()
@

\end{frame}


\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- histogram}

<<warning=FALSE,fig.height=5,message=FALSE>>=
ggplot(minke, aes(length)) + geom_histogram()
@

\end{frame}

\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- bar-plot}

<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(maturity)) + geom_bar()
@

\end{frame}

\frame{
\frametitle{Colors}

\bi One can play with assigning colors to points and other objects by
variable:
\vs
\item Colour is controled by  \texttt{aes(...,colour=variable)}
\vs
\item If the geom is ``fillable'' one can use  \texttt{aes(...,fill=variable)}
\ei
}

\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- scatter-plot, now with color}

<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(age,length,col=sex)) + geom_point()
@

\end{frame}


\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- bar-plot, now with color}

<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(maturity,fill=sex)) + geom_bar()
@

\end{frame}



\begin{frame}[fragile,shrink=0.9]
\frametitle{Position}
Barplots that are split between values of factor can place either side by side (''dodged'') or stacked on top of each other. 
\bi Stacked 
<<warning=FALSE,eval=FALSE,fig.height=5>>=
ggplot(minke, aes(maturity,fill=sex)) + geom_bar()
@
\item Dodged:
<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(maturity,fill=sex)) + geom_bar(position='dodge')
@
\ei

\end{frame}




\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- box-plot}

<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(age, length, group = round_any(age,5))) + 
  geom_boxplot()
@

\end{frame}

\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- adding layers}

<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(age, length, group = round_any(age,5))) + 
  geom_boxplot() + geom_point()
@

\end{frame}

\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- adding layers}

<<warning=FALSE,fig.height=5>>=
ggplot(minke, aes(age, length, group = round_any(age,5))) + 
  geom_boxplot() + geom_point(aes(age,length,col=sex)) 
@

\end{frame}



\begin{frame}[fragile,shrink=0.95]
\frametitle{Example geoms -- adding layers, now with a smoothing line}

<<warning=FALSE,fig.height=5,message=FALSE>>=
ggplot(minke, aes(age, length, group = round_any(age,5))) + 
  geom_boxplot() + geom_point(aes(age,length,col=sex)) + 
  geom_smooth(aes(group=1))
@

\end{frame}


\frame{
  \frametitle{Faceting}
  Plots can be faceted by one (or more) factor(s): 
  \bi  \texttt{facet\_grid()} - facets by a fixed grid according the factor level
  \vs
  \item \texttt{facet\_wrap()} - neatly wraps facets by factorlevels between rows: \\ 
  \ei
}

\begin{frame}[fragile,shrink=0.95]
\frametitle{facet\_grid}
<<warning=FALSE,fig.height=5,message=FALSE>>=
ggplot(minke, aes(year)) + geom_bar() +
  facet_grid(sex~NS)
@

\end{frame}

\begin{frame}[fragile,shrink=0.95]
\frametitle{facet\_wrap}
<<warning=FALSE,fig.height=5,message=FALSE>>=
ggplot(minke, aes(NS,fill=sex)) + 
  facet_wrap(~year) + geom_bar()
@

\end{frame}



%\frame{
%\frametitle{Stats}
%\bi Used for plotting statistics/summaries
%\bi e.g. mean of the response at fixed levels of the predictior
%\item or non-standard box--plots
%\ei
%\vs
%\item Specified using prefix stat\_ and suffix that names the desired
%  transformation:
%\bi Means, meadians etc.. specified with stat\_summary()
%\item Regression models with stat\_smooth()
%\item Mathematical formulae and functions can be drawn with stat\_function()
%\ei
%\ei
%}





%\subsection{Appearance}



\frame{
\frametitle{Changing axis labels}
\bi \texttt{xlab()} - Assigns name to the x-axis 
\vs
\item \texttt{ylab()} - Assigns name to the y-axis 
\vs
\item \texttt{theme(legend.position=c(x,y))} gives the coordinate of the legend, legend.position='none' removes the legend
\ei
}

\begin{frame}[fragile,shrink=0.95]
\frametitle{facet\_wrap}
<<warning=FALSE,fig.height=5,message=FALSE>>=
ggplot(minke, aes(NS,fill=sex)) + 
  facet_wrap(~year) + geom_bar() + xlab('Area') + 
  ylab('Number of whales caught') + 
  theme(legend.position=c(0.8,0.2))
  
@

\end{frame}


%\frame{
%\frametitle{Scales}
%Colorpalettes can be changed at the users discretion:

%\bi \texttt{scale\_fill\_brewer()} - scales from colourbrewer2.org
%\vs
%\item \texttt{scale\_fill\_manual(values=c("\#CC6666", "\#9999CC", "\#66CC99"))} -- manual scales.
%\vs
%\item \texttt{scale\_fill\_continuous()} - continous scale \\
%\vs
%\item \texttt{scale\_fill\_discrete()} - discrete scale\\
%\vs
%\ei
%}

\frame{
\frametitle{Themes}
ggplot2 is supplied with two colour themes:

\bi theme\_grey -- default background theme
\vs 
\item theme\_bw -- white background, darker gridlines.
\vs
\item User can define its own theme (or update the current) using the theme command
\vs
\item Additional themes can be found in other packages extending ggplot2.
\ei

}

\begin{frame}[fragile,shrink=0.95]
\frametitle{facet\_wrap}
<<warning=FALSE,fig.height=5,message=FALSE>>=
ggplot(minke, aes(NS,fill=sex)) + 
  facet_wrap(~year) + geom_bar() + xlab('Area') + 
  ylab('Number of whales caught') + 
  theme(legend.position=c(0.8,0.2)) +
  theme_bw()
  
@

\end{frame}


%\section{Example}

%\frame{

%\includegraphics[width=0.8\linewidth]{../../Greinar/MinkeSurvey/Article/Figures/Fig1.pdf}
%}


%\frame{
%  \frametitle{Extending ggplot2}
%  \bi ggmaps -- embeds online maps (openstreetmap, google maps, etc..) as layer. 
%  \vs
%\item gridExtra -- based on \texttt{grid} and allow mixing grid objects to a single plot device
%  \vs 
%\item ggthemes -- new color themes to ggplot2.
%\ei
%}

\frame{
\frametitle{On--line resources}
\bi docs.ggplot2.org
\vs
\item stackoverflow.com
\ei
}


\frame{
\frametitle{Excercise 2}
 Create a new script as a part of your project and name it 'Ex2.R'. In this script write code to:
\bi Move the data folder to your project folder
\vs
\item Read in the minke whale dataset
\vs
\item Plot length as a function of age and colour the points according the area where the whales were taken
\vs
\item Plot a histogram of age for the whales
\vs
\item Plot a histogram of the age faceted by year
\ei
}

\section{Data summaries}
\frame{
\frametitle{dplyr}
\bi dplyr is a set of tools for a common set of problems connected to
aggregates or summaries of data. 
\vs
\item Similar to ggplot2 it features a Domain Specific Language (DSL)
  specially designed for data summaries.  
\vs
\item Developed by Hadley Wickam, the creator ggplot2 and other
  useful tools.
\ei

}




\frame{
\frametitle{Summarising data for groups}
Commonly, when collating summaries by group, one wants to:  
\bi \textbf{Split} up a big data structure into homogeneous pieces, 
\vs
\item \textbf{Apply} a function to each piece 
\vs
\item \textbf{Combine} all the results back together.
\ei

For example, one might want to

\bi fit the same model each patient subsets of a data frame
\vs
\item quickly calculate summary statistics for each group
\vs
\item perform group-wise transformations like scaling or standardising
\ei
}

\begin{frame}[fragile,shrink=0.9]
\frametitle{Filter data}
One can create a subset of the data using the \texttt{filter} command:
<<>>=
## create a dataset with only females 
minke.females <- filter(minke,sex=='Female')
head(minke.females)
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Logical operators}
A list of logical operators that are useful when filtering data:
<<eval=FALSE>>=
<       # less than 
<=      # less than or equal to 
>       # larger than 
>=      # larger or equal to 
==      # equal to 
!=      # no equal to 
x | y   # x or y
x & y   # x and y 
@


\end{frame}


\begin{frame}[fragile]
\frametitle{Modifying columns}
If one wants to create a new variable (column) into the data sets one can either:

<<eval=FALSE>>=
minke$approx.weight <- 3.85*1e-06*minke$length^3.163
@

or use mutate

<<eval=FALSE>>=
minke <- mutate(minke,approx.weight = 3.85*1e-06*length^3.163)
@

This probably not very useful until you want to create many variables at once:

<<>>=
minke <- mutate(minke,
                approx.weight = 3.85*1e-06*length^3.163,
                weight = ifelse(is.na(weight),approx.weight,
                                weight))
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Creating summaries}
Similarly one can create summaries from the data using the summarise function:
<<>>=
summarise(minke,num.obs = length(whale.id))
@

And new summaries can be added:

<<>>=
summarise(minke, 
          num.obs = length(whale.id),   
          num.fem = sum(sex == 'Female'), 
          num.large = sum(length > 650))
@


\end{frame}

\begin{frame}[fragile]
\frametitle{Split - apply - combine}
\bi Summarise and mutate are somewhat useful on its own but become much more useful when combined with a group\_by statement:
<<>>=
## split the analysis by area
minke <- group_by(minke,NS)   
summarise(minke,
          num.obs = length(whale.id), 
          num.fem = sum(sex=='Female'), 
          num.large = sum(length>650))

@

<<echo=FALSE>>=
minke <- ungroup(minke)
@

\ei
\end{frame}


\begin{frame}[fragile]
\frametitle{Chaining expressions together}
Operations can be chained using the $\%>\%$ operator
<<>>=
minke %>% 
  group_by(NS) %>%   
  summarise(num.obs = length(whale.id), 
            num.fem = sum(sex=='Female'), 
            num.large = sum(length>650))
@

\end{frame}

\frame{
\frametitle{Excercise 3}
Create a new script, 'Ex3.R' and write code that produces:
\bi The number of whales caught each year
\vs
\item The proportion caught of which are females each year
\vs
\item Calculate the mean length and age along with standard deviation grouped by maturity
\ei
}


\section{Fitting models}
\frame{
\frametitle{Simple model fitting}
\begin{columns}
\begin{column}{0.5\linewidth}
\bi Now say we want to fit a growth curve to our minke whale data
\vs 
\item Typically this would by a Von Bertalanffy growth curve of the form:
$$ l = L_{\infty}(1-e^{-k(a-t_0)})$$
\vs
\item How do we do this in R?
\ei

\end{column}
\begin{column}{0.5\linewidth}
<<echo=FALSE,message=FALSE,warning=FALSE,fig.width=5,fig.height=4>>=
ggplot(minke,aes(age,length)) + geom_point() + theme_bw() + ylab('Length') + xlab('Age')
@
\end{column}
\end{columns}

}

\frame{
\frametitle{What do we want to do exactly?}
\bi We want to find the best fitting curve through the datapoints
\vs
\item This means that we want to "draw" a line that minimized on average the distance to all data points, i.e. find x that solves
$$\textup{min}_{\textbf{x}} \left(\sum_{i} (l_i - \textup{VonB}(\textbf{x},a(i)))^2\right)$$
\vs
\item In the Von B function there are three parameters, $L_\infty$, $k$ and $t_0$ that can be adjusted so the task here is to find values of these three parameters such that the above sum is minimized
\ei

}

\begin{frame}[fragile]
\frametitle{In R:}
<<>>=
age.data <- filter(minke,!is.na(age))
minke.vonB.par <- 
  nls(length~Linf*(1-exp(-K*(age-t0))),
      data=age.data, start=list(Linf=1100, K=0.1, t0=-1))
minke.vonB.par
@

\end{frame}

\begin{frame}[fragile]
\frametitle{And prepare for a plot}
First define a Von B function:
<<>>=
vonB <- function(linf,k,a,t0){
  gr <- linf * (1 - exp(-k * (a-t0)))
  return(gr)
}
@
Then calculate the average length for each age
<<>>=
x <- coefficients(minke.vonB.par) ## get the coefficients
age <- seq(1,50,by=1/12) ## age by month
pred.length <- vonB(x[1],x[2],age,x[3])
pred.dat <- ## create a data table
  data.frame(age=age,length=pred.length)
@


\end{frame}

\begin{frame}[fragile,shrink=0.9]
\frametitle{And plot:}

<<fig.width=5,fig.height=3,warning=FALSE,message=FALSE>>=
ggplot(minke,aes(age,length)) + geom_point() + 
  geom_line(data=pred.dat) +   
  theme_bw() + ylab('Length') + xlab('Age') 
@


\end{frame}


\end{document}