% SLIDES - brug denne linie
\documentclass[mathserif]{beamer} % options: gray

% HANDOUTS - brug denne linie
%\documentclass[handout,mathserif]{beamer} % options: gray

\usetheme{CambridgeUS} %sidebar
\usecolortheme{dolphin}

\usepackage{graphicx}
\usepackage{amssymb,amsmath}
\usepackage[T1]{fontenc}
%\usepackage[icelandic]{babel}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{bm}
\usepackage{tipx}
\usepackage{marvosym}
%\usepackage{subfigure}
\usepackage{pgfpages}
\usepackage{multirow}
\usepackage{color}

\usepackage{tikz,makecell}
\usetikzlibrary{arrows,decorations.pathmorphing,decorations.footprints,
fadings,calc,trees,mindmap,shadows,decorations.text,patterns,positioning,shapes,matrix,fit}
\input{../Day01/graphical_settings}
\tikzset{
  invisible/.style={opacity=0},
  visible on/.style={alt={#1{}{invisible}}},
  alt/.code args={<#1>#2#3}{%
    \alt<#1>{\pgfkeysalso{#2}}{\pgfkeysalso{#3}} % \pgfkeysalso doesn't change the path
  },
}
% hvis man vil har eg. 4 slides på en side
% \pgfpagesuselayout{4 on 1}[a4paper,border shrink = 5mm, landscape]

\definecolor{lgrey}{RGB}{245,245,245}
\setbeamercolor{block body}{fg=black,bg=lgrey}
\definecolor{Red}{rgb}{0.9,0,0.1}
\definecolor{lblue}{rgb}{0.0,0.5,0.6}
\DeclareMathOperator{\var}{Var}
\DeclareMathOperator{\cov}{Cov}      % Covariance
\DeclareMathOperator{\bcov}{\cov}    % Covariance (as used in the GLM book)
\DeclareMathOperator{\mcov}{C}       % multi dimensional covariance
\DeclareMathOperator{\dis}{D}        % dispersion matrix
\DeclareMathOperator{\acfest}{C}     % estimate of the autocovariance function
\DeclareMathOperator{\e}{E}          % mean
\DeclareMathOperator{\mean}{\e}      % mean (as used in the GLM book)
\DeclareMathOperator{\cor}{Cor}      % correlation
\DeclareMathOperator{\diag}{diag}    % diagonal-matrix
\DeclareMathOperator{\rang}{rank}    % matrix-rank
\DeclareMathOperator{\for}{for}    % for
\DeclareMathOperator{\FOp}{F}        % forward shift operator
\DeclareMathOperator{\SOp}{S}        % sum operator
\DeclareMathOperator{\HOp}{H}        % arbitrary operator
\DeclareMathOperator{\Real}{Re}      % real-part
\DeclareMathOperator{\Imag}{Im}      % imaginary-part
\DeclareMathOperator*{\member}{\in}  % belongs to or is an element in
\DeclareMathOperator{\msea}{MSE1}    % Mean Square Error 1
\DeclareMathOperator{\mseb}{MSE2}    % Mean Square Error 2
\DeclareMathOperator{\sse}{SSE}      % Sum of Squared Errors
\DeclareMathOperator{\ssb}{SSB}      % Sum of Squared Blocks
\DeclareMathOperator{\sst}{SST}      % Sum of Squared Treatments
\DeclareMathOperator{\adj}{adj}      % Just guessing...

\newcommand{\bs}{\boldsymbol}
\newcommand{\bi}{\begin{itemize}\item}
\newcommand{\ei}{\end{itemize}}
\newcommand{\eq}[1]{\begin{equation} #1 \end{equation}}
\newcommand{\ea}[1]{\begin{eqnarray} #1 \end{eqnarray}}
\newcommand{\vs}{\vspace{2mm}}

\definecolor{Red}{rgb}{0.9,0,0.1}

\title[Data mining]{Data mining}
\subtitle{Day 3}
\author[Bjarki\&Einar]{Bjarki Þór Elvarsson and Einar Hjörleifsson}
\date{} % beskidt .. men det virker
\institute[MRI]{Marine Research Institute}
\beamertemplatenavigationsymbolsempty % fjerner pdf-indhold, til hvis der bare skal printes slides ud
\AtBeginSection[]{
\begin{frame}<beamer>
   \frametitle{Overview}
   \tableofcontents[currentsection]
 \end{frame}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<echo=FALSE, warning=FALSE, message=FALSE>>=
library(ggplot2)
library(plyr)
library(dplyr)
minke <- read.csv2('../data/minke.csv')
@
\frame{
\titlepage
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frame{
\frametitle{Overview}
\tableofcontents
}

\section{Solutions to assignment 1}

\section{Useful R-commands}

\begin{frame}[fragile]
\frametitle{if sentences}
\bi It is often so that we would like some parts of our code to run only if some condition is fulfilled 
\vs
\item We use \texttt{if} sentences for that
\vs
\item When setting up the conditions the operators come in handy
\ei
\begin{columns}
  \begin{column}{0.05\textwidth}
\end{column}
\begin{column}{0.95\textwidth}
\begin{alltt}
if({\color{lblue}condition})\{
  {\color{lblue}this runs if the condition(s) are fulfilled}
\} 
\end{alltt}
\end{column}
\end{columns}
\end{frame}


\begin{frame}[fragile]
\frametitle{if sentences - example}
<<eval=FALSE>>=
dat <- read.csv2('../species/species-8.csv')

## check if depth data is available for all
## entries, if not do something
if(sum(is.na(dat$depth))>0){
    print('Some depth data missing')
}
@

\end{frame}


\begin{frame}[fragile]
\frametitle{if and else sentences}
\bi Sometimes we would like to check for more than one condition
\vs
\item We use a combination of \texttt{if} and \texttt{else} sentences for that
\ei
\begin{columns}
  \begin{column}{0.05\textwidth}
\end{column}
\begin{column}{0.95\textwidth}
\begin{alltt}
if({\color{lblue}condition 1})\{
  {\color{lblue}this runs if condition 1 is fulfilled,  
  then we skip the else-sentences below}
\} else if({\color{lblue}condition 2})\{
    {\color{lblue}this runs if condition 2 is fulfilled,  
  then we skip the else-sentence below}
\} else\{
  {\color{lblue}this runs of neither condition 1 or 2 are fulfilled}
\} 
\end{alltt}
\end{column}
\end{columns}
\end{frame}



\begin{frame}[fragile,shrink=0.95]
\frametitle{if - else sentences - example}
<<eval=FALSE>>=
dat <- read.csv2('../species/species-8.csv')

## check if depth data is missing for more than 
## 10 entries
if(sum(is.na(dat$depth))>10){
    print('More that 10 entries missing')
} else if(sum(is.na(dat$depth))>0){
    print('Less 10 entries missing')
} else {
  print('No depth missing')
}
@

\end{frame}


\begin{frame}[fragile]
\frametitle{ifelse sentences}
\bi It is often so that we only have two conditions 
\vs
\item We use \texttt{ifelse} sentences for these cases
\ei
\begin{columns}
  \begin{column}{0.05\textwidth}
\end{column}
\begin{column}{0.95\textwidth}
\begin{alltt}
ifelse({\color{lblue}condition},
       {\color{lblue}this runs if the condition is fulfilled}, 
       {\color{lblue}this runs if the condition is not fulfilled})
\end{alltt}
\end{column}
\end{columns}
\end{frame}

\begin{frame}[fragile,shrink=0.95]
\frametitle{ifelse sentences - example}
<<eval=FALSE>>=
dat <- read.csv2('../species/species-8.csv')

## find all missing entries and replace them
dat$depth <- ifelse(is.na(dat$depth),0,
                    dat$depth)
@

\end{frame}


\begin{frame}[fragile]
\frametitle{for-loop}
\bi We use a \texttt{for}-loop if we need some part of our code to run more than one time and we know how often it sould run
\vs
\item We use an index/counter that counts how often we enter the loop
\vs
\item We try to avoid \texttt{for}-loops because they are rather slow
\vs
\item There are several commands in R that help us to avoid for-loops - see the end of the slides
\ei
\begin{columns}
  \begin{column}{0.05\textwidth}
\end{column}
\begin{column}{0.95\textwidth}
\begin{alltt}
for({\color{lblue}index} in {\color{lblue}vector})\{
  {\color{lblue}This code runs as often as the length of the vector}
\}
\end{alltt}
\end{column}
\end{columns}
\end{frame}



\begin{frame}[fragile]
\frametitle{while-loop}
\bi While-loops are similar to for-loops
\vs
\item We use a \texttt{while}-loop if we need some part of our code to run more than one time but we dont know how often it sould run 
\vs
\item The loop runs while the condition stated is fulfilled
\ei
\begin{columns}
  \begin{column}{0.05\textwidth}
\end{column}
\begin{column}{0.95\textwidth}
\begin{alltt}
while({\color{lblue}condition})\{
  {\color{lblue}This code runs while the condition(s) are fulfilled}
\}
\end{alltt}
\end{column}
\end{columns}
\end{frame}

\begin{frame}[fragile]
\frametitle{Loops, examples}
<<eval=FALSE>>=
## find the number of entries in the data
n <- nrow(dat)

## calculate the mean length old fashion way
ML <- 0
for(i in 1:n){
  ML <- ML + dat$length[i]
}
ML <- ML/n
@


\end{frame}



\frame{
\frametitle{Userdefined functions in R}
\bi Even though there are a great number of built in functions/commands/methods in R we sometimes need to write our own functions
\vs
\item We use \texttt{function} for that
\vs
\item We can write a name of a built in function in the console to to get the code behind it
\vs
\item We can take the code and change it as we please
\ei
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]
\frametitle{function}
\bi A function has a name, takes arguments/settings and returns an object
\vs
\item Object within the function are local within the function
\vs
\item Objects the function returns can be of any type
\ei
\begin{columns}
  \begin{column}{0.05\textwidth}
\end{column}
\begin{column}{0.95\textwidth}
\begin{alltt}
{\color{lblue}nameofFunction} <- function({\color{lblue}argument1}, {\color{lblue}argument2}, {\color{lblue}...} )\{
  {\color{lblue}The code of the function}
  return({\color{lblue}object})
\}
\end{alltt}
\end{column}
\end{columns}
\end{frame}

\begin{frame}[fragile]
\frametitle{function}
<<>>=
add1 <- function(x){
  x <- x + 1
  return(x)
}

add1(10)
x
@

\end{frame}

\frame{
\frametitle{Class excercise}
Using your species:
\bi Define a function that calculates the condition factor of a fish using the formula:
$$C = 100*(W/L^3)$$
\item Use the function to calculate the condition factor for all fish that have ungutted weight
\vs
\item Assign classification to all fish with body condition less than 0.8 'Malnourished', for 0.8 and above assign "OK".
\ei

}

\section{Reading data in R}
\frame{
\frametitle{Where can we find data}
\begin{figure}
  \begin{tikzpicture}[xscale = 1,yscale = 1]
    \node (lykl)[GenericNodeStyle] at (4,2){Keyboard};
    \node (tolfr)[GenericNodeStyle] at (-4,2){Other stats software};
    \node[below of = tolfr](tolff){SPSS,Matlab,SAS};
    \node (xml)[GenericNodeStyle] at (-4,-2){XML};
    \node (Excel)[GenericNodeStyle] at (0,2){Excel};
    \node (dbi)[GenericNodeStyle] at (0,-2){Databases};
    \node[below of = dbi](sql){ODBC,sqlite,Oracle};
    \node (R)[GenericNodeStyle] at (0,0){R};
    \node (text)[GenericNodeStyle] at (4,-2){Textfiles};
    \node[below of = text](skr){csv,txt,html};
    \draw[->](lykl)--(R);
    \draw[->](tolfr)--(R);
    \draw[<->](Excel)--(R);
    \draw[<->](dbi)--(R);
    \draw[<->](text)--(R);
    \draw[<->](xml)--(R);
  \end{tikzpicture}
\end{figure}


}

\begin{frame}[fragile]
\frametitle{Data entered directly into R}
One of the most useless forms of data enry is the "edit" command in R:
<<eval=FALSE>>=
dat <- data.frame(id=numeric(0), species=character(0),
                  length=numeric(0),age=numeric(0),
                  lat = numeric(0),lon=numeric(0))
dat <- edit(dat)
@
Note that this only creates variable in R that, unless saved, will disappear when R is closed.
\end{frame}

\begin{frame}[fragile,shrink=0.8]
\frametitle{Text files - read in}
\bi A lot of functions in R deal with reading in text files in various formats
\vs
\item Most of these functions are derivatives of \texttt{read.table}, such as \texttt{read.csv} and \texttt{read.delim}
\ei

<<eval=FALSE>>=
dat <- 
  read.table(file = "nameOfFile", ## path to the file
             header = TRUE,       ## are column names 
                                  ## at the top
             dec = '.',           ## decimal sign
             sep = ' ',           ## column separator symbol
             skip = 0,            ## num lines at top to skip
             comment.char = '#')  ## indicating comments
@


\end{frame}


\begin{frame}[fragile]
\frametitle{Text files - written out}
Analoguous to \texttt{read.table} we have \texttt{write.table}:
<<eval=FALSE>>=
write.table(dat,
            file = 'nameOfFile', ## file name
            col.names = TRUE,    ## write header
            row.names = FALSE    ## write row names
            quote = FALSE,       ## characters qouted?
            sep = ',',
            dec = '.')
@

\end{frame}

\frame{
\frametitle{Location of files}
\begin{columns}
\begin{column}{0.5\linewidth}
\begin{figure}
\begin{tikzpicture}[sibling distance=10em,
  every node/.style = {shape=rectangle, rounded corners,
    draw, align=center,
    top color=white, bottom color=white}],xscale = 0.75,yscale = 0.75]
  \node {Root}
    child { node {curr.dir} }
    child { node {dir1}
      child { node {dir2}
        child { node {file1} }
        child { node {file2} }
        child { node {file3} }} 
      child { node {wrong.dir}}};
\end{tikzpicture}

\end{figure}
\end{column}
\begin{column}{0.5\linewidth}
Assume you want read "file3" from "curr.dir":
\bi Go up one level to "Root": ".."
\item Go to dir1: "../dir1"
\item Go to dir2: "../dir1/dir2"
\item Locate file2: "../dir1/dir2/file2"
\ei
\vspace{3cm}

\end{column}
\end{columns}
}

\begin{frame}[fragile]
\frametitle{Excel files}
The \texttt{readxl} package provides support to read in Excel files directly into R
<<eval=FALSE>>=
library(readxl) ## needs to be installed
# read_excel reads both xls and xlsx files
read_excel("my-old-spreadsheet.xls")
read_excel("my-new-spreadsheet.xlsx")

# Specify sheet with a number or name
read_excel("my-spreadsheet.xls", sheet = "data")
read_excel("my-spreadsheet.xls", sheet = 2)

# If NAs are represented by something other than blank cells,
# set the na argument
read_excel("my-spreadsheet.xls", na = "NA")
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Connecting to an Access database}
\texttt{RODBC} provides functions to connect to an Access database
<<eval=FALSE>>=
# Load RODBC package
library(RODBC)

# Connect to Access db
channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")

# Get data
data <- sqlQuery( channel , "select *
 from Name_of_table_in_my_database")

# close connection
close(channel)

@


\end{frame}


\begin{frame}[fragile]
\frametitle{Class excercise}
\bi Try the "edit" command, enter some random numbers and save the data to file, open it in Excel and save it as an excel file
\vs
\item Open notepad and enter the following data, save it and read into R using \texttt{read.table}:
\begin{verbatim}
a   b   c
1   1.5 cod
2   2.5 haddock
\end{verbatim}
\vs
\item Install \texttt{readxl} and try to read in the excel data file you created earlier
\vs
\item Open an example Access database and run queries from R
\ei
\end{frame}


\section{Fitting models}

\frame{
\frametitle{Linear models}
\begin{columns}
\begin{column}{0.5\linewidth}
\bi A linear model is a model that can be written as:
$$ y = a+ b*x_1 + c*x_2 + \ldots $$
where $y$ is the predicted value, $x_1, x_2, \ldots$ the input variables and $a$ and $b$ the parameters
\item In statistics the goal is often to relate $y$, i.e. the observations, and the independent variables ($x_i$-s)
\item This can be done using linear regression
\ei
\end{column}
\begin{column}{0.5\linewidth}
<<echo=FALSE,warning=FALSE,message=FALSE>>=

x <- seq(0,10,by=0.01)
y <- rnorm(100)*0.5 + x
qplot(x,y) + geom_line(data=data.frame(y=x,x=x), col='red',lwd=2)
@
\end{column}
\end{columns}
}



\frame{
\frametitle{Simple model fitting}
\bi In essence regression analysis is simply the calculation of a slope parameter and the intercept. 
\vs
\item Observations, however, are often noisy which is often written as:
$$ Y_i = \alpha + \beta X_i + \epsilon_i$$ 
where $\epsilon_i$ denotes the difference between observations and predictions
\vs
\item The goal with regression is to find minimize this difference to produce more accurate predictions of the observations, i.e. find $\alpha$ and $\beta$ such that 
$$ \sum_i(Y_i-\alpha - \beta X_i)^2 $$
is as small as possible
\ei
}

\frame{
\frametitle{Length weight relationship}
\bi Now we want to predict the weights for whales that were not weighed, using linear regression
\vs
\item Often one sees the length weight relationship charaterised as:
$$W = a*L^b$$
\item Now this is a non-linear relationship (if $b\neq 1$) but is easy to linearise using $\log$:
$$\log(W) = \log(a)+ b*\log(L)$$

\ei

}


\begin{frame}[fragile]
\frametitle{Let's play a bit}
<<eval=FALSE>>=
wlFun <- function(a,b,dat){
  return(list(p=ggplot(dat,aes(log(length),log(weight))) + 
                geom_point() + 
                geom_abline(intercept=-12,slope=3)+
                ylim(c(0,10)) + xlim(c(0,10)),
              ss=sum((dat$weight - a - b*log(dat$length))^2)))
}
 minke %>% filter(!is.na(weight)) %>% wlFun(-12,3,.)
@

\end{frame}

\begin{frame}[fragile,shrink=0.95]
\frametitle{Estimate using R}
R has linear regression by default, invoked using "lm"
<<>>=
fit <- lm(log(weight)~log(length),data=minke)
summary(fit)
@

\end{frame}


\begin{frame}[fragile,shrink=0.95]
\frametitle{Estimate using R}
One can add other variables into the regression fairly easily:
<<>>=
fit <- lm(log(weight)~log(length) + sex,data=minke)
summary(fit)
@

\end{frame}



\frame{
\frametitle{Non-linear model fitting}
\begin{columns}
\begin{column}{0.5\linewidth}
\bi Now say we want to fit a growth curve to our minke whale data
\vs 
\item Typically this would by a Von Bertalanffy growth curve of the form:
$$ l = L_{\infty}(1-e^{-k(a-t_0)})$$
\vs
\item How do we do this in R?
\ei

\end{column}
\begin{column}{0.5\linewidth}
<<echo=FALSE,message=FALSE,warning=FALSE,fig.width=5,fig.height=4>>=

ggplot(minke,aes(age,length)) + geom_point() + theme_bw() + ylab('Length') + xlab('Age')
@
\end{column}
\end{columns}

}

\frame{
\frametitle{What do we want to do exactly?}
\bi Again we want to find the best fitting curve through the datapoints, although now we want estimate a more arbitrary function
\vs
\item This means that we want to "draw" a line that minimized on average the distance to all data points, i.e. find x that solves
$$\textup{min}_{\textbf{x}} \left(\sum_{i} (l_i - \textup{VonB}(\textbf{x},a(i)))^2\right)$$
\vs
\item In the Von B function there are three parameters, $L_\infty$, $k$ and $t_0$ that can be adjusted so the task here is to find values of these three parameters such that the above sum is minimized
\ei

}

\begin{frame}[fragile]
\frametitle{In R:}
<<>>=
age.data <- filter(minke,!is.na(age))
minke.vonB.par <- 
  nls(length~Linf*(1-exp(-K*(age-t0))),
      data=age.data, start=list(Linf=1100, K=0.1, t0=-1))
minke.vonB.par
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Formulas in nls}
<<eval=FALSE>>=
  nls(length~Linf*(1-exp(-K*(age-t0))),
      data=age.data, start=list(Linf=1100, K=0.1, t0=-1))

@

\bi Formulas in R typically look for variables in the data, in this case the minke whale dataset.
\vs
\item If a variable is not in the data, such as variables "Linf", "K" and "t0", they are assumed to be parameters that need to be estimated
\vs
\item Starting values are given in the input as "start". If not given the function may converge to a wrong minima or not at all.
\ei
\end{frame}

\begin{frame}[fragile]
\frametitle{Confidence intervals}
Recall that a 95\% confidence interval represents the potential range of the data, i.e. one can not reject the hypothesis that the parameter estimate is within the range. Confidence intervals can be computed using the following command:
<<>>=
confint(minke.vonB.par)
@


\end{frame}

\begin{frame}[fragile]
\frametitle{Plotting the VonB estimate}
First define a Von B function:
<<>>=
vonB <- function(linf,k,a,t0){
  gr <- linf * (1 - exp(-k * (a-t0)))
  return(gr)
}
@
Then calculate the average length for each age
<<>>=
x <- coefficients(minke.vonB.par) ## get the coefficients
age <- seq(1,50,by=1/12) ## age by month
pred.length <- vonB(x[1],x[2],age,x[3])
pred.dat <- ## create a data table
  data.frame(age=age,length=pred.length)
@


\end{frame}

\begin{frame}[fragile,shrink=0.9]
\frametitle{And plot:}

<<fig.width=5,fig.height=3,warning=FALSE,message=FALSE>>=
ggplot(minke,aes(age,length)) + geom_point() + 
  geom_line(data=pred.dat) +   
  theme_bw() + ylab('Length') + xlab('Age') 
@


\end{frame}

\frame{
\frametitle{In class excercise}
Using the same species as you had in assignment 1:
\bi Estimate the length - weight relationship
\vs
\item Estimate the Von Bertalanffy curve
\vs
\item Plot the results
\ei

}


\end{document}